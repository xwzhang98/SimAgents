from openai import OpenAI
import json
from typing import Dict, Any, Tuple, Optional
from .base_retriever import ParameterRetriever


class ZeroShotCoTRetriever(ParameterRetriever):
    """Retrieves parameters using Zero-shot Chain of Thought prompting."""
    
    def __init__(self, model_name: str = "gpt-4o", api_key: str = None, 
                 user_manual_path: Optional[str] = None):
        super().__init__(model_name=model_name, api_key=api_key)
        self.client = OpenAI(api_key=api_key)
        self.user_manual_path = user_manual_path
        self.manual_content = None
        
        # Load manual if provided
        if user_manual_path:
            self.manual_content = self._load_manual(user_manual_path)
            self.method_name = "ZeroShotCoTRetriever_with_manual"
        else:
            self.method_name = "ZeroShotCoTRetriever_without_manual"
    
    def _load_manual(self, manual_path: str) -> str:
        """Load the MP-Gadget user manual."""
        try:
            # Try to read as PDF first
            try:
                import PyPDF2
                with open(manual_path, 'rb') as file:
                    pdf_reader = PyPDF2.PdfReader(file)
                    content = ""
                    for page in pdf_reader.pages:
                        content += page.extract_text() + "\n"
                return content
            except ImportError:
                print("PyPDF2 not installed. Trying to read as text file...")
                
            # Fallback to text file
            with open(manual_path, 'r') as file:
                return file.read()
                
        except Exception as e:
            print(f"Warning: Could not load manual from {manual_path}: {e}")
            return None
        
    def retrieve_parameters(self, paper_content: str, custom_prompt: str = None) -> Tuple[Dict[str, Any], str]:
        """Extract parameters using Zero-shot Chain of Thought approach."""
        
        # Build prompt based on whether manual is available
        if self.manual_content:
            # Prompt with manual knowledge
            zero_shot_cot_prompt = """You have access to the MP-Gadget user manual. Based on this knowledge, extract MP-Gadget simulation parameters from the scientific paper.

"""
            if custom_prompt:
                zero_shot_cot_prompt += f"IMPORTANT INSTRUCTION: {custom_prompt}\n\n"
                
            zero_shot_cot_prompt += """Here is relevant information from the MP-Gadget user manual:
{manual_excerpt}

MP-Gadget requires two configuration files:
1. .genic file (initial conditions) with parameters: OutputDir, FileWithInputSpectrum, FileBase, FileWithTransferFunction, Nmesh, BoxSize, Seed
2. .gadget file (main simulation) with parameters: InitCondFile, OutputDir, TimeMax, OutputList

Required Parameters for genic file:
OutputDir - Pathname of the directory that holds all the output generated by MP-GenIC (the initial conditions)
FileBase - Base-filename of output files. ICs will be created at OutputDir/FileBase and stored in Bigfile format
BoxSize - The size of the periodic box (in code units: by default comoving kpc/h) encompassing the simulation volume
Ngrid - Cube root of the number of particles of each species particles created
WhichSpectrum - Initial power spectrum model to use. '1' selects Eisenstein & Hu spectrum, '2' selects a tabulated power spectrum
FileWithInputSpectrum - File containing input power spectrum, from CLASS or CAMB
Omega0 - Total matter density, cdm + baryons + massive neutrinos at z = 0
OmegaBaryon - Baryon density in units of the critical density at z = 0
OmegaLambda - Dark energy density at z=0. Cosmological vacuum energy density
HubbleParam - Value of the Hubble constant in units of 100 km s−1 Mpc−1
ProduceGas - Should we create baryon particles? 1 = Produce gas, 0 = no gas, just DM
Redshift - Starting redshift of the simulation
Seed - Seed for IC-generator

Required parameters for .gadget file:
InitCondFile - Filename of the initial conditions to be read in at start-up
OutputDir - Pathname of the directory that holds all the output generated by the simulation
OutputList - Comma-separated list of output scale factors
TimeLimitCPU - CPU-time limit for the current run in seconds
MetalReturnOn - Enables Metal Return
CoolingOn - Enables Cooling
SnapshotWithFOF - Enable built-in Friends-of-Friends halo finder
BlackHoleOn - Enable Black hole model and AGN feedback
StarformationOn - Enables star formation
WindOn - Enables stellar wind feedback from supernovae
MassiveNuLinRespOn - Enables linear response massive neutrinos
DensityIndependentSphOn - Enable the Pressure-entropy formulation of SPH
Omega0 - Total matter density at z=0

Please show your full reasoning, step by step, before giving each parameter value

Paper content:
{paper_content}

Please provide:
1. Your step-by-step reasoning process, using knowledge from the manual
2. The extracted parameters in JSON format with 'genic' and 'gadget' sections
3. Any assumptions you made"""
            
            # Extract most relevant part of manual (first 3000 chars for context limit)
            manual_excerpt = self.manual_content if self.manual_content else ""
            prompt = zero_shot_cot_prompt.format(
                manual_excerpt=manual_excerpt,
                paper_content=paper_content
            )
        else:
            # Original prompt without manual
            zero_shot_cot_prompt = """Extract MP-Gadget simulation parameters from the following scientific paper.

"""
            if custom_prompt:
                zero_shot_cot_prompt += f"IMPORTANT INSTRUCTION: {custom_prompt}\n\n"
                
            zero_shot_cot_prompt += """MP-Gadget requires two configuration files:
1. .genic file (initial conditions) with parameters: OutputDir, FileWithInputSpectrum, FileBase, FileWithTransferFunction, Nmesh, BoxSize, Seed
2. .gadget file (main simulation) with parameters: InitCondFile, OutputDir, TimeMax, OutputList

Required Parameters for genic file:
OutputDir - Pathname of the directory that holds all the output generated by MP-GenIC (the initial conditions)
FileBase - Base-filename of output files. ICs will be created at OutputDir/FileBase and stored in Bigfile format
BoxSize - The size of the periodic box (in code units: by default comoving kpc/h) encompassing the simulation volume
Ngrid - Cube root of the number of particles of each species particles created
WhichSpectrum - Initial power spectrum model to use. '1' selects Eisenstein & Hu spectrum, '2' selects a tabulated power spectrum
FileWithInputSpectrum - File containing input power spectrum, from CLASS or CAMB
Omega0 - Total matter density, cdm + baryons + massive neutrinos at z = 0
OmegaBaryon - Baryon density in units of the critical density at z = 0
OmegaLambda - Dark energy density at z=0. Cosmological vacuum energy density
HubbleParam - Value of the Hubble constant in units of 100 km s−1 Mpc−1
ProduceGas - Should we create baryon particles? 1 = Produce gas, 0 = no gas, just DM
Redshift - Starting redshift of the simulation
Seed - Seed for IC-generator

Required parameters for .gadget file:
InitCondFile - Filename of the initial conditions to be read in at start-up
OutputDir - Pathname of the directory that holds all the output generated by the simulation
OutputList - Comma-separated list of output scale factors
TimeLimitCPU - CPU-time limit for the current run in seconds
MetalReturnOn - Enables Metal Return
CoolingOn - Enables Cooling
SnapshotWithFOF - Enable built-in Friends-of-Friends halo finder
BlackHoleOn - Enable Black hole model and AGN feedback
StarformationOn - Enables star formation
WindOn - Enables stellar wind feedback from supernovae
MassiveNuLinRespOn - Enables linear response massive neutrinos
DensityIndependentSphOn - Enable the Pressure-entropy formulation of SPH
Omega0 - Total matter density at z=0

Let's think step by step.

Paper content:
{paper_content}

Please provide:
1. Your step-by-step reasoning process
2. The extracted parameters in JSON format with 'genic' and 'gadget' sections
3. Any assumptions you made"""
            
            prompt = zero_shot_cot_prompt.format(paper_content=paper_content)

        response = self.client.chat.completions.create(
            model=self.model_name,
            messages=[
                {"role": "user", "content": prompt}
            ],
            temperature=0.1,
            max_tokens=2000
        )
        
        content = response.choices[0].message.content
        
        # Parse the response to extract JSON and reasoning
        lines = content.split('\n')
        json_start = -1
        json_end = -1
        
        # Find JSON block
        for i, line in enumerate(lines):
            if '{' in line and json_start == -1:
                json_start = i
            if json_start != -1 and '}' in line:
                # Check if this is the closing brace for the main JSON
                json_text = '\n'.join(lines[json_start:i+1])
                try:
                    json.loads(json_text)
                    json_end = i
                    break
                except:
                    continue
        
        if json_start != -1 and json_end != -1:
            json_text = '\n'.join(lines[json_start:json_end+1])
            reasoning_text = '\n'.join(lines[:json_start] + lines[json_end+1:])
            
            try:
                # Extract just the parameter dictionary
                full_response = json.loads(json_text)
                
                # Handle different possible JSON structures
                if "genic" in full_response and "gadget" in full_response:
                    parameters = full_response
                elif "parameters" in full_response:
                    parameters = full_response["parameters"]
                else:
                    # Try to find genic and gadget sections
                    parameters = {
                        "genic": {},
                        "gadget": {}
                    }
                    for key, value in full_response.items():
                        if isinstance(value, dict):
                            if "genic" in key.lower():
                                parameters["genic"] = value
                            elif "gadget" in key.lower():
                                parameters["gadget"] = value
                
            except json.JSONDecodeError:
                # Fallback: create default structure
                parameters = self._create_default_parameters()
                reasoning_text = content
        else:
            # If we can't parse JSON, provide defaults
            parameters = self._create_default_parameters()
            reasoning_text = content
        
        # Clean up reasoning text
        reasoning_text = reasoning_text.strip()
        if not reasoning_text:
            reasoning_text = "Zero-shot Chain of Thought analysis completed. Parameters extracted based on step-by-step reasoning."
        
        # Validate parameters
        parameters = self.validate_parameters(parameters)
        
        return parameters, reasoning_text
    
    def _create_default_parameters(self) -> Dict[str, Any]:
        """Create default parameter structure."""
        return {
            "genic": {
                "OutputDir": "./sim_output/",
                "FileWithInputSpectrum": "pk_z99.dat",
                "FileBase": "ICs",
                "Nmesh": 128,
                "BoxSize": 100.0
            },
            "gadget": {
                "InitCondFile": "./sim_output/ICs",
                "OutputDir": "./sim_output/",
                "TimeMax": 1.0,
                "OutputList": "0.1,0.2,0.33,0.5,1.0"
            }
        }